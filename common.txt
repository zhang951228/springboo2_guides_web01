创建一个网关。
docker network create mysql-network
各种复制粘贴配置文件，参考着玩，不重要
docker cp 7dd62a978248:/etc/my.cnf /usr/local/zds/
docker cp /usr/local/zds/etc/mysql/my.cnf 74e97ccdecb6:/etc/mysql/my.cnf
docker cp 6b2b5cc8e4d8:/etc/mysql/my.cnf /usr/local/zds/
docker cp /usr/local/zds/my.cnf 6b2b5cc8e4d8:/etc/mysql/my.cnf

运行两个mysql实例
docker run -itd --name mysqlmaster01 --network mysql-network -p 3306:3306 -e MYSQL_ROOT_PASSWORD=p...b(全字母) mysql
docker run -itd --name mysqlslave04  --network mysql-network -p 3307:3306 -e MYSQL_ROOT_PASSWORD=p...b(全字母) mysql

master中创建复制用户。
CREATE USER 'slave'@'%' IDENTIFIED BY '123456';
master中赋值权限
GRANT REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO 'slave'@'%';

参考网站：https://www.cnblogs.com/songwenjie/p/9371422.html
change master to master_host='172.18.0.2', master_user='slave', master_password='123456', master_port=3306, master_log_file='mysql-bin.000002', master_log_pos= 156, master_connect_retry=30;

命令说明：

master_host ：Master的地址，指的是容器的独立ip,可以通过docker inspect --format='{{.NetworkSettings.IPAddress}}' 容器名称|容器id查询容器的ip

mark

master_port：Master的端口号，指的是容器的端口号

master_user：用于数据同步的用户

master_password：用于同步的用户的密码

master_log_file：指定 Slave 从哪个日志文件开始复制数据，即上文中提到的 File 字段的值

master_log_pos：从哪个 Position 开始读，即上文中提到的 Position 字段的值

master_connect_retry：如果连接失败，重试的时间间隔，单位是秒，默认是60秒

在Slave 中的mysql终端执行show slave status \G;用于查看主从同步状态。

正常情况下，SlaveIORunning 和 SlaveSQLRunning 都是No，因为我们还没有开启主从复制过程。使用start slave开启主从复制过程，然后再次查询主从同步状态show slave status \G;。SlaveIORunning 和 SlaveSQLRunning 都是Yes，说明主从复制已经开启。此时可以测试数据同步是否成功。

使用start slave开启主从复制过程后，如果SlaveIORunning一直是Connecting，则说明主从复制一直处于连接状态，这种情况一般是下面几种原因造成的，我们可以根据 Last_IO_Error提示予以排除。

网络不通

检查ip,端口

密码不对

检查是否创建用于同步的用户和用户密码是否正确

pos不对

检查Master的 Position